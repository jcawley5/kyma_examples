apiVersion: kubeless.io/v1beta1
kind: Function
metadata:
  annotations:
    function-size: S
  creationTimestamp: 2019-06-06T18:56:36Z
  finalizers:
  - kubeless.io/function
  generation: 1
  name: order-created
spec:
  deployment:
    metadata:
      creationTimestamp: null
    spec:
      replicas: 1
      strategy: {}
      template:
        metadata:
          creationTimestamp: null
        spec:
          containers:
          - name: order-created
            resources:
              limits:
                cpu: 100m
                memory: 128Mi
              requests:
                cpu: 100m
                memory: 100Mi
    status: {}
  deps: "{\r\n    \"name\": \"app\",\r\n    \"version\": \"0.0.1\",\r\n    \"dependencies\":
    {\r\n        \"redis\":  \"2.8.0\"\r\n     }\r\n}"
  function: "const Redis = require(\"redis\");\n\nmodule.exports = { main: function
    (event, context) {\n    console.log(\"hello from order created\");\n    console.log(\"Received
    data: \", event.data);\n    \n    var orderCode = event.data.orderCode;\n    var
    orderDate = new Date().toISOString().split('T')[0] + \"_orders\";\n    \n    console.log(\"will
    send data: \", orderDate);\n    console.log(\"will send data: \", orderCode);\n
    \   \n    var redisClient = Redis.createClient({\n        port:  process.env.PORT,\n
    \       host: process.env.HOST,\n        password: process.env.REDIS_PASSWORD\n
    \   });\n            \n    redisClient.on('connect', function() {\n        redisClient.rpush([orderDate,
    orderCode], function(err, reply) {});\n    });\n    \n   redisClient.on(\"error\",
    function (err) {\n        console.log(\"Redis createClient Error \" + err);\n
    \   });\n            \n}}"
  function-content-type: text
  handler: handler.main
  horizontalPodAutoscaler:
    metadata:
      creationTimestamp: null
      labels:
        function: order-created
      name: order-created
    spec:
      maxReplicas: 2
      metrics:
      - resource:
          name: cpu
          targetAverageUtilization: 50
        type: Resource
      minReplicas: 1
      scaleTargetRef:
        apiVersion: apps/v1beta1
        kind: Deployment
        name: order-created
    status:
      conditions: null
      currentMetrics: null
      currentReplicas: 0
      desiredReplicas: 0
  runtime: nodejs8
  service:
    ports:
    - name: http-function-port
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      created-by: kubeless
      function: order-created
  timeout: ""
  topic: order.created